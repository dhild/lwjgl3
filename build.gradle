/*
 * Copyright LWJGL. All rights reserved.
 * License terms: http://lwjgl.org/license.php
 */
import org.apache.tools.ant.taskdefs.condition.Os

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.11.91'
    }
}

//MAJOR.MINOR.REVISION
//[0-9].[0-9].[0-9]+[ab]?
version = '3.0.0a'

ext {
    buildType = hasProperty('LWJGL_BUILD_TYPE') ? getProperty('LWJGL_BUILD_TYPE') : 'stable'
}

apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.6
targetCompatibility = 1.6

sourceSets {
    main {
        java {
            srcDirs = ['src/core', 'src/util', 'generated/java']
        }
    }
    test {
        java {
            srcDirs = ['src/tests']
        }
    }
    templates {
        java {
            srcDirs = ['src/templates', 'config']
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    kotlinRuntime
}

repositories {
    mavenCentral()
}

dependencies {
    templatesCompile 'org.jetbrains.kotlin:kotlin-stdlib:0.11.91'
    kotlinRuntime 'org.jetbrains.kotlin:kotlin-runtime:0.11.91'
    templatesCompile files("${System.properties['java.home']}/../lib/tools.jar")
    compile files("${System.properties['java.home']}/../lib/tools.jar")

    testCompile 'org.testng:testng:6.8.13'
}

sourceSets.main.compileClasspath += sourceSets.templates.output

task generate(type: JavaExec) {
    dependsOn 'compileTemplatesJava'
    dependsOn 'compileTemplatesKotlin'
    classpath configurations.templatesCompile
    classpath configurations.kotlinRuntime
    classpath sourceSets.templates.output.classesDir
    main = "org.lwjgl.generator.GeneratorPackage"

    args "${file('src/templates')}"
    args "${file('generated')}"
}

compileJava.dependsOn 'generate'

test {
    jvmArgs '-Xcheck:jni'
    enableAssertions = true
    systemProperty 'org.lwjgl.util.Debug', 'true'
    //systemProperty 'java.library.path', "" ---> bin, libs

    if ( Os.isFamily(Os.FAMILY_MAC) ) {
        jvmArgs '-XstartOnFirstThread'
    }

    useTestNG {
        suites 'config/tests.xml'
        if ( Os.isFamily(Os.FAMILY_UNIX) ) {
            suites 'config/tests_linux.xml'
        }
        if ( Os.isFamily(Os.FAMILY_MAC) ) {
            suites 'config/tests_macosx.xml'
        }
        if ( Os.isFamily(Os.FAMILY_WINDOWS) ) {
            suites 'config/tests_windows.xml'
        }
    }
}

javadoc {
    title "LWJGL $version"
    options {
        encoding 'utf8'
        doclet "org.lwjgl.system.ExcludeDoclet"
        docletpath file("$buildDir/classes/templates"), file("$buildDir/kotlin-classes/templates")
    }
    source 'src/core', 'src/util', 'generated/java'
}

/*
 * Native Library Configuration:
 */

apply plugin: 'c'

def updateDependency(String platform, String artifact) {
    file("$buildDir/libs/$platform").mkdirs()
    OutputStream dest = file("$buildDir/libs/$platform/$artifact").newOutputStream()
    dest << new URL("http://s3.amazonaws.com/build.lwjgl.org/${ext.buildType}/$platform/$artifact").openStream()
    dest.close()
}

task updateWindowsX64 {
    outputs.file("$buildDir/libs/windows/x64/OpenAL32.dll")
    outputs.file("$buildDir/libs/windows/x64/glfw3.lib")
    outputs.file("$buildDir/libs/windows/x64/libffi.lib")
    doLast {
        updateDependency('windows/x64', 'OpenAL32.dll')
        updateDependency('windows/x64', 'glfw3.lib')
        updateDependency('windows/x64', 'libffi.lib')
    }
}

task updateWindowsX86 {
    outputs.file("$buildDir/libs/windows/x86/OpenAL32.dll")
    outputs.file("$buildDir/libs/windows/x86/glfw3.lib")
    outputs.file("$buildDir/libs/windows/x86/libffi.lib")
    doLast {
        updateDependency('windows/x86', 'OpenAL32.dll')
        updateDependency('windows/x86', 'glfw3.lib')
        updateDependency('windows/x86', 'libffi.lib')
    }
}

model {
    buildTypes {
        debug
        release
    }
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            glfw3 {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("$buildDir/libs/windows/${targetPlatform.name}/glfw3.lib")
                }
            }
            libffi {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("$buildDir/libs/windows/${targetPlatform.name}/libffi.lib")
                }
            }
        }
    }
    components {
        lwjgl(NativeLibrarySpec) {
            if ( Os.isFamily(Os.FAMILY_WINDOWS) || Os.isFamily(Os.FAMILY_UNIX) ) {
                targetPlatform "x86"
            }
            targetPlatform "x64"
            sources.c {
                source {
                    srcDir 'src/native/system'
                    srcDir 'src/native/system/libffi'
                    srcDir 'generated/native/system'
                    srcDir 'generated/native/system/libffi'
                    srcDir 'generated/native/openal'
                    srcDir 'generated/native/opencl'
                    srcDir 'generated/native/opengl'
                    if ( Os.isFamily(Os.FAMILY_WINDOWS) ) {
                        srcDir 'generated/native/system/windows'
                        srcDir 'generated/native/glfw'
                        srcDir 'generated/native/opengl/wgl'
                    }
                    include '*.c'
                }
            }
            binaries.all {
                lib library: 'glfw3', linkage: 'static'
                lib library: 'libffi', linkage: 'static'
                if ( toolChain in VisualCpp ) {
                    cCompiler.define "LWJGL_WINDOWS"
                    cCompiler.args "/Wall", "/WX", "/wd4996", "/EHsc", "/Ox", "/Gy", "/MT", "/MP", "/nologo"
                    cCompiler.args "/I${file('src/native/system')}"
                    cCompiler.args "/I${file('src/native/system/windows')}"
                    cCompiler.args "/I${file('src/native/system/libffi')}"
                    cCompiler.args "/I${file('src/native/glfw')}"
                    cCompiler.args "/I${file('src/native/openal')}"
                    cCompiler.args "/I${file('src/native/opencl')}"
                    cCompiler.args "/I${file('src/native/opengl')}"
                    cCompiler.args "/I${file('src/native/opengl/wgl')}"
                    cCompiler.args "/I${System.properties['java.home']}/../include"
                    cCompiler.args "/I${System.properties['java.home']}/../include/win32"
                    linker.args '/LD', '/WX', '/nologo', '/OPT:REF,ICF', '/DLL'
                    linker.args 'Kernel32.lib', 'user32.lib', 'Gdi32.lib', 'winmm.lib', 'shell32.lib', 'OpenGL32.Lib'
                }
            }
        }
    }
}

afterEvaluate {
    if ( Os.isFamily(Os.FAMILY_WINDOWS) ) {
        tasks.withType(LinkSharedLibrary) {
            dependsOn 'updateWindowsX86'
            dependsOn 'updateWindowsX64'
        }
    }
}

