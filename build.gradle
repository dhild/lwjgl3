/*
 * Copyright LWJGL. All rights reserved.
 * License terms: http://lwjgl.org/license.php
 */

import org.apache.tools.ant.taskdefs.condition.Os

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.11.91'
    }
}

//MAJOR.MINOR.REVISION
//[0-9].[0-9].[0-9]+[ab]?
version = '3.0.0a'

ext {
    buildType = hasProperty('LWJGL_BUILD_TYPE') ? getProperty('LWJGL_BUILD_TYPE') : 'stable'
    isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
    isLinux = Os.isFamily(Os.FAMILY_UNIX) && !Os.isFamily(Os.FAMILY_MAC)
    isMac = Os.isFamily(Os.FAMILY_MAC)

    // x86 is not in the original build script for Mac
    jvmArch = (isMac || System.getProperty("os.arch") == 'amd64') ? 'x64' : 'x86'
    osName = isWindows ? 'windows' : (isLinux ? 'linux' : (isMac ? 'macosx' : 'UNKNOWN'))
}

apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.6
targetCompatibility = 1.6

sourceSets {
    main {
        java {
            srcDirs = ['src/core', 'src/util', 'generated/java']
        }
    }
    test {
        java {
            srcDirs = ['src/tests']
        }
    }
    templates {
        java {
            srcDirs = ['src/templates', 'config']
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    kotlinRuntime
}

repositories {
    mavenCentral()
}

dependencies {
    templatesCompile 'org.jetbrains.kotlin:kotlin-stdlib:0.11.91'
    kotlinRuntime 'org.jetbrains.kotlin:kotlin-runtime:0.11.91'
    templatesCompile files("${System.properties['java.home']}/../lib/tools.jar")
    compile files("${System.properties['java.home']}/../lib/tools.jar")

    testCompile 'org.testng:testng:6.8.13'
}

sourceSets.main.compileClasspath += sourceSets.templates.output

task generate(type: JavaExec) {
    doFirst {
        file('generated').mkdirs()
    }
    dependsOn 'compileTemplatesJava'
    dependsOn 'compileTemplatesKotlin'
    classpath configurations.templatesCompile
    classpath configurations.kotlinRuntime
    classpath sourceSets.templates.output.classesDir
    main = "org.lwjgl.generator.GeneratorPackage"

    args "${file('src/templates')}"
    args "${file('generated')}"
}

compileJava {
    dependsOn 'generate'
    // Supresses internal API (e.g. Unsafe) usage warnings
    options.compilerArgs << "-XDignore.symbol.file=true"
    options.fork = true
}

test {
    useTestNG { // According to the docs, this option should come first.
        suites 'config/tests.xml'
        suites "config/tests_${osName}.xml"
    }

    jvmArgs '-Xcheck:jni'
    enableAssertions = true
    systemProperty 'org.lwjgl.util.Debug', 'true'
    if ( isMac ) {
        jvmArgs '-XstartOnFirstThread'
        // Only one arch for Mac right now, which changes the library output directory.
        dependsOn 'debugLwjglSharedLibrary'
        systemProperty 'java.library.path',
                       files("$buildDir/binaries/lwjglSharedLibrary/debug",
                             "$buildDir/libs/macosx/x64").asPath
    } else {
        dependsOn "${jvmArch}DebugLwjglSharedLibrary"
        systemProperty 'java.library.path',
                       files("$buildDir/binaries/lwjglSharedLibrary/${jvmArch}Debug",
                             "$buildDir/libs/$osName/$jvmArch").asPath
    }
}

javadoc {
    title "LWJGL $version"
    options {
        encoding 'utf8'
        docEncoding 'utf8'
        noHelp true
        noTree true
        doclet "org.lwjgl.system.ExcludeDoclet"
        docletpath file("$buildDir/classes/templates"), file("$buildDir/kotlin-classes/templates")
        docTitle '<h1>Lightweight Java Game Library</h1>'
        bottom '<i>Copyright LWJGL. All Rights Reserved. <a href="http://lwjgl.org/license.php">License terms</a>.</i>'
    }
    source 'src/core', 'src/util', 'generated/java'
}

/*
 * Native Library Configuration:
 */

apply plugin: 'c'

ext {
    libOpenALName = isWindows ? 'OpenAL32.dll' : (isLinux ? 'libopenal.so' : (isMac ? 'libopenal.dylib' : 'UNKNOWN_OpenAL'))
    libglfw3Name = isWindows ? 'glfw3.lib' : (isLinux ? 'libglfw3.a' : (isMac ? 'libglfw3.a' : 'UNKNOWN_glfw3'))
    libffiName = isWindows ? 'libffi.lib' : (isLinux ? 'libffi.a' : (isMac ? 'libffi.a' : 'UNKNOWN_libffi'))
}

def updateDependency(String platform, def artifact) {
    file("$buildDir/libs/$platform").mkdirs()
    OutputStream dest = file("$buildDir/libs/$platform/$artifact").newOutputStream()
    dest << new URL("http://s3.amazonaws.com/build.lwjgl.org/${ext.buildType}/$platform/$artifact").openStream()
    dest.close()
}

task updateExternalLibsX64 {
    outputs.file("$buildDir/libs/$osName/x64/$libOpenALName")
    outputs.file("$buildDir/libs/$osName/x64/$libglfw3Name")
    outputs.file("$buildDir/libs/$osName/x64/$libffiName")
    doLast {
        updateDependency("$osName/x64", libOpenALName)
        updateDependency("$osName/x64", libglfw3Name)
        updateDependency("$osName/x64", libffiName)
    }
}

task updateExternalLibsX86 {
    outputs.file("$buildDir/libs/$osName/x86/$libOpenALName")
    outputs.file("$buildDir/libs/$osName/x86/$libglfw3Name")
    outputs.file("$buildDir/libs/$osName/x86/$libffiName")
    doLast {
        updateDependency("$osName/x86", libOpenALName)
        updateDependency("$osName/x86", libglfw3Name)
        updateDependency("$osName/x86", libffiName)
    }
}

model {
    buildTypes {
        debug
        release
    }
    platforms {
        if ( isWindows || isLinux ) {
            x86 {
                architecture "x86"
            }
        }
        x64 {
            architecture "x86_64"
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            glfw3 {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("$buildDir/libs/$osName/${targetPlatform.name}/$libglfw3Name")
                }
            }
            libffi {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("$buildDir/libs/$osName/${targetPlatform.name}/$libffiName")
                }
            }
        }
    }
    components {
        lwjgl(NativeLibrarySpec) {
            if ( isWindows || isLinux ) {
                targetPlatform "x86"
            }
            targetPlatform "x64"
            sources.c {
                source {
                    srcDir 'src/native/system'
                    srcDir 'src/native/system/libffi'
                    srcDir 'generated/native/system'
                    srcDir 'generated/native/system/libffi'
                    srcDir 'generated/native/glfw'
                    srcDir 'generated/native/openal'
                    srcDir 'generated/native/opencl'
                    srcDir 'generated/native/opengl'
                    srcDir "generated/native/system/$osName"
                    if ( isWindows ) {
                        srcDir 'generated/native/opengl/wgl'
                    }
                    if ( isLinux ) {
                        srcDir 'generated/native/opengl/glx'
                    }
                    if ( isMac ) {
                        include '*.m'
                        exclude '*CL20.c'
                    }
                    include '*.c'
                }
            }
            binaries.all {
                lib library: 'glfw3', linkage: 'static'
                lib library: 'libffi', linkage: 'static'
                if ( toolChain in VisualCpp ) {
                    cCompiler.define "LWJGL_WINDOWS"
                    cCompiler.args "/Wall", "/WX", "/wd4996", "/EHsc", "/Ox", "/Gy", "/MT", "/MP", "/nologo"
                    cCompiler.args "/I${file('src/native/system')}"
                    cCompiler.args "/I${file('src/native/system/windows')}"
                    cCompiler.args "/I${file('src/native/system/libffi')}"
                    cCompiler.args "/I${file('src/native/glfw')}"
                    cCompiler.args "/I${file('src/native/openal')}"
                    cCompiler.args "/I${file('src/native/opencl')}"
                    cCompiler.args "/I${file('src/native/opengl')}"
                    cCompiler.args "/I${file('src/native/opengl/wgl')}"
                    cCompiler.args "/I${System.properties['java.home']}/../include"
                    cCompiler.args "/I${System.properties['java.home']}/../include/win32"
                    linker.args '/WX', '/nologo', '/OPT:REF,ICF', '/DLL'
                    linker.args 'Kernel32.lib', 'user32.lib', 'Gdi32.lib', 'winmm.lib', 'shell32.lib', 'OpenGL32.Lib'
                }
                if ( toolChain in Gcc || toolChain in Clang ) {
                    if ( isLinux ) {
                        cCompiler.define "LWJGL_LINUX"
                        cCompiler.define "_XOPEN_SOURCE=700"
                        cCompiler.args "-std=c11", "-pthread"
                        cCompiler.args "-I${file('src/native/system/linux')}"
                        cCompiler.args "-I${file('src/native/opengl/glx')}"
                        cCompiler.args "-I${System.properties['java.home']}/../include"
                        cCompiler.args "-I${System.properties['java.home']}/../include/linux"

                        linker.args "-lm", "-lpthread", "-lX11", "-lGL", "-lXi", "-lXrandr", "-lXxf86vm", "-lXinerama", "-lXcursor"
                        linker.args "-fPIC", "-pthread", "-Xlinker", "--version-script", "-Xlinker", "${file('config/linux/version.script')}"
                    }
                    if ( isMac ) {
                        cCompiler.define "LWJGL_MACOSX"
                        cCompiler.args "-I${System.properties['java.home']}/../include"
                        cCompiler.args "-I${System.properties['java.home']}/../include/darwin"
                        cCompiler.args "-std=c99", "-I${file('src/native/system/macosx')}"
                        cCompiler.args '-Wno-deprecated'

                        // TODO: Figure out how to handle:
                        // compiler args: -isysroot ${sdkroot} -mmacosx-version-min=${macosx-version-min}
                        // linker args: -mmacosx-version-min=${macosx-version-min}

                        linker.args "-Wl,-no_compact_unwind"
                        linker.args '-framework', 'AppKit'
                        linker.args '-framework', 'CoreVideo'
                        linker.args '-framework', 'IOKit'
                        linker.args '-framework', 'OpenGL'
                    }
                    cCompiler.args "-O3", "-fPIC"
                    cCompiler.args "-Werror", "-Wfatal-errors", "-Wall", "-Wextra", "-pedantic", "-Wno-extended-offsetof"
                    cCompiler.args "-I${file('src/native/system')}"
                    cCompiler.args "-I${file('src/native/system/libffi')}"
                    cCompiler.args "-I${file('src/native/glfw')}"
                    cCompiler.args "-I${file('src/native/openal')}"
                    cCompiler.args "-I${file('src/native/opencl')}"
                    cCompiler.args "-I${file('src/native/opengl')}"
                }
            }
        }
    }
}

afterEvaluate {
    tasks.withType(LinkSharedLibrary) {
        dependsOn 'updateExternalLibsX64'
        if ( isWindows || isLinux ) {
            dependsOn 'updateExternalLibsX86'
        }
    }
}

