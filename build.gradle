/*
 * Copyright LWJGL. All rights reserved.
 * License terms: http://lwjgl.org/license.php
 */

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.11.91'
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.6
targetCompatibility = 1.6

sourceSets {
    main {
        java {
            srcDirs = ['src/core', 'generated/java']
        }
    }
    templates {
        java {
            srcDirs = ['src/templates', 'config']
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    kotlinRuntime
}

repositories {
    mavenCentral()
}

dependencies {
    templatesCompile 'org.jetbrains.kotlin:kotlin-stdlib:0.11.91'
    kotlinRuntime 'org.jetbrains.kotlin:kotlin-runtime:0.11.91'
    templatesCompile files("${System.properties['java.home']}/../lib/tools.jar")
    compile files("${System.properties['java.home']}/../lib/tools.jar")
}

sourceSets.main.compileClasspath += sourceSets.templates.output

task generate(type: JavaExec) {
    dependsOn 'compileTemplatesJava'
    dependsOn 'compileTemplatesKotlin'
    classpath configurations.templatesCompile
    classpath configurations.kotlinRuntime
    classpath sourceSets.templates.output.classesDir
    main = "org.lwjgl.generator.GeneratorPackage"

    args "${file('src/templates')}"
    args "${file('generated')}"
}

compileJava.dependsOn 'generate'

/*
 * Native Library Configuration:
 */

apply plugin: 'c'

model {
    components {
        lwjgl(NativeLibrarySpec) {
            binaries.all {
                if ( toolChain in VisualCpp ) {
                    sources {
                        platformC(CSourceSet) {
                            source.srcDir 'src/native/system'
                            source.srcDir 'src/native/system/libffi'
                            source.srcDir 'generated/native/system'
                            source.srcDir 'generated/native/system/libffi'
                            source.srcDir 'generated/native/system/windows'
                            source.srcDir 'generated/native/glfw'
                            source.srcDir 'generated/native/openal'
                            source.srcDir 'generated/native/opencl'
                            source.srcDir 'generated/native/opengl'
                            source.srcDir 'generated/native/opengl/wgl'
                            source.include '*.c'
                        }
                    }
                    cCompiler.define "LWJGL_WINDOWS"
                    cCompiler.args "/Wall", "/WX", "/wd4996", "/EHsc", "/Ox", "/Gy", "/MT", "/MP", "/nologo"
                    cCompiler.args "/I${file('src/native/system')}"
                    cCompiler.args "/I${file('src/native/system/windows')}"
                    cCompiler.args "/I${file('src/native/system/libffi')}"
                    cCompiler.args "/I${file('src/native/glfw')}"
                    cCompiler.args "/I${file('src/native/openal')}"
                    cCompiler.args "/I${file('src/native/opencl')}"
                    cCompiler.args "/I${file('src/native/opengl')}"
                    cCompiler.args "/I${file('src/native/opengl/wgl')}"
                    cCompiler.args "/I${System.properties['java.home']}/../include"
                    cCompiler.args "/I${System.properties['java.home']}/../include/win32"
                    linker.args '/LD', '/WX', '/nologo', '/OPT:REF,ICF', '/DLL'
                    linker.args "Kernel32.lib", "user32.lib", "Gdi32.lib", "winmm.lib", "shell32.lib", "OpenGL32.Lib"
                }
            }
        }
    }
}
